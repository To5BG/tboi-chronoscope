<shaders>
    <shader name="ZaWarudoClassic">
        <parameters>
            <param name="Enabled" type="float"/>
            <param name="DistortionScale" type="float"/>
            <param name="DistortionOn" type="float"/>
        </parameters>
        <vertex><![CDATA[
			attribute vec3 Position;
			attribute vec4 Color;
			attribute vec2 TexCoord;
			attribute vec4 RenderData;
			attribute float Scale;
			attribute float DistortionScale;
			attribute float DistortionOn;
			attribute float Enabled;
			varying vec4 Color0;
			varying vec2 TexCoord0;
			varying lowp vec4 RenderDataOut;
			varying float ScaleOut;
			varying float DistortionScaleOut;
			varying float DistortionOnOut;
			varying float EnabledOut;
			uniform mat4 Transform;

			void main(void)
			{
				RenderDataOut = RenderData;
				ScaleOut = Scale;
				Color0 = Color;
				TexCoord0 = TexCoord;
				DistortionScaleOut = DistortionScale;
				DistortionOnOut = DistortionOn;
				EnabledOut = Enabled;
				gl_Position = Transform * vec4(Position.xyz, 1.0);
			}
		]]></vertex>
        <fragment><![CDATA[
			varying lowp vec4 Color0;
			varying mediump vec2 TexCoord0;
			varying lowp vec4 RenderDataOut;
			varying lowp float ScaleOut;
			varying lowp float DistortionScaleOut;
			varying lowp float DistortionOnOut;
			varying lowp float EnabledOut;
			uniform sampler2D Texture0;

			void main(void)
			{
				vec4 col = texture2D(Texture0, TexCoord0);
				if (EnabledOut == 1)
				{
                    vec3 col2 = vec3(0.75) - col.rgb;
                    vec3 fcol = vec3(mix(col.r, col2.r, DistortionScaleOut),
                        mix(col.g, col2.g, DistortionScaleOut),
                        mix(col.b, col2.b, DistortionScaleOut));
                    vec3 mcol = vec3(mix(fcol.r, (fcol.r+fcol.g+fcol.b)/3., DistortionOnOut),
                        mix(fcol.g, (fcol.r+fcol.g+fcol.b)/3., DistortionOnOut),
                        mix(fcol.b, (fcol.r+fcol.g+fcol.b)/3., DistortionOnOut));
                    col.rgb = mcol;
                }
				gl_FragColor = Color0 * col;
			}
		]]></fragment>
    </shader>
    <shader name="ZaWarudo">
        <parameters>
            <param name="Enabled" type="float"/>
            <param name="Time" type="float"/>
            <param name="PlayerPos" type="vec2"/>
            <param name="Depth" type="float"/>
            <param name="Thickness" type="float"/>
            <param name="Reach" type="float"/>
        </parameters>
        <vertex><![CDATA[
			attribute vec3 Position;
			attribute vec4 Color;
			attribute vec2 TexCoord;
			attribute vec4 RenderData;
			attribute float Scale;
			attribute float Enabled;
			attribute float Time;
			attribute vec2 PlayerPos;
			attribute float Depth;
			attribute float Thickness;
			attribute float Reach;
			varying vec4 Color0;
			varying vec2 TexCoord0;
			varying lowp vec4 RenderDataOut;
			varying float ScaleOut;
			varying float EnabledOut;
			varying float TimeOut;
			varying vec2 PlayerPosOut;
			varying float DepthOut;
			varying float ThicknessOut;
			varying float ReachOut;
			uniform mat4 Transform;

			void main(void)
			{
				RenderDataOut = RenderData;
				ScaleOut = Scale;
				Color0 = Color;
				TexCoord0 = TexCoord;
				// passing args
				EnabledOut = Enabled;
				TimeOut = Time;
				PlayerPosOut = PlayerPos;
				DepthOut = Depth;
				ThicknessOut = Thickness;
				ReachOut = Reach;

				gl_Position = Transform * vec4(Position.xyz, 1.0);
			}
		]]></vertex>
        <fragment><![CDATA[
			varying lowp vec4 Color0;
			varying mediump vec2 TexCoord0;
			varying lowp vec4 RenderDataOut;
			varying lowp float ScaleOut;
			varying lowp float EnabledOut;
			varying lowp float TimeOut;
			varying lowp vec2 PlayerPosOut;
			varying lowp float DepthOut;
			varying lowp float ThicknessOut;
			varying lowp float ReachOut;
			uniform sampler2D Texture0;

			void main(void)
            {
                vec4 Color = texture2D(Texture0, TexCoord0);

                if (EnabledOut == 1)
                {
                    vec2 center = PlayerPosOut;
                    vec2 texCoord = gl_FragCoord / RenderDataOut.xy;

                    float ratio = RenderDataOut.y / RenderDataOut.x;
                    center.y *= ratio;
                    texCoord.y *= ratio;
                    float dist = distance(texCoord, center);

                    if ((dist <= TimeOut + ReachOut) && (dist >= TimeOut - ReachOut))
                    {
                        float diff = (dist - TimeOut);
                        float scaledDiff = (1.0 - pow(abs(diff * DepthOut), ThicknessOut));

                        TexCoord0 += normalize(TexCoord0 - center) * diff  * scaledDiff /
                            (TimeOut * dist * 40.0);

                        Color = texture(Texture0, TexCoord0);
                        Color += (Color * scaledDiff) / (TimeOut * dist * 40.0);
                    }
                }
                gl_FragColor = Color0 * Color;
            }
		]]></fragment>
    </shader>
</shaders>